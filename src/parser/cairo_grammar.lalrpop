use crate::parser::ast::*;
use crate::parser::lexer::{CairoToken, CairoLexerError};
use std::borrow::Cow;

grammar<'input>(input: &'input str);

// ----------- Imports ---------------

ImportDirective: ImportDirective = {
    <l:@L> "from" <path:Identifier> <functions:FunctionImport> <r:@L> => ImportDirective {loc: Loc(l, r), path, functions},
};

Directive: Directive = {
     <l:@L> "%builtins" <builtin:Builtin+> <r:@L> => Directive::Builtins(Loc(l,r), builtin),
     <l:@L> "%lang" <name:Identifier> <r:@L> => Directive::Lang(Loc(l,r), name),
}

Rename: String = {
    "as" <id:Id>  => id
}

AliasedId: AliasedId = {
   <l:@L> <id:Id> <alias:Rename?>  <r:@L>=> AliasedId { id, alias, loc:Loc(l,r) }
}

FunctionImport: FunctionImport = {
   <l:@L> "import" <imports:("("notes <Comma<AliasedId>> ")")> <r:@L> => FunctionImport::Parantheses(Loc(l,r), imports),
    <l:@L> "import"  <imports:(notes <CommaOne<AliasedId>>)> <r:@L> => FunctionImport::Direct(Loc(l,r), imports),
}

// ------------- Types ------------------

Atom: Expr = {
    <l:@L> "nondet" <x:Hint> <r:@L> => Expr::Hint(x, Loc(l,r)),
    <l:@L> <n:number> <r:@L> => Expr::Int(n.parse().unwrap(), Loc(l,r)),
    <l:@L> <s:shortstring> <r:@L>=> Expr::ShortString(s.to_string(), Loc(l,r)),
    <l:@L> <s:hexnumber> <r:@L>=> Expr::HexInt(s.to_string(), Loc(l,r)),
    <l:@L> <s:Register>  <r:@L>=> Expr::Register(s, Loc(l,r)),
     FunctionCall  => Expr::FunctionCall(<>),
    <l:@L> "[" notes <x:Expr> "]" <r:@L> => Expr::Deref(Box::new(x), Loc(l,r)),
    <l:@L> <pre:Atom> "[" notes <x:Expr> "]"  <r:@L>=> Expr::Subscript(Box::new(pre), Box::new(x), Loc(l,r)),
    <l:@L> <id:Identifier> <m:@L> "[" notes <x:Expr> "]" <r:@L> => Expr::Subscript(Box::new(Expr::Id(id, Loc(l,m))), Box::new(x), Loc(l,r)),
    <l:@L> <x:Atom> "." <s:Id> <r:@L> =>  Expr::Dot(Box::new(x), s, Loc(l,r)),
    <l:@L> "cast" "(" notes <x:Expr> "," <ty:Type> ")" <r:@L> => Expr::Cast(Box::new(x),ty, Loc(l,r)),
    <l:@L> "(" <args:ArgList> ")"  <r:@L>=> Expr::Parentheses(args, Loc(l,r)),
}

Pow: Expr = {
    <l:@L>  <id:Identifier> <r:@L>  => Expr::Id(id, Loc(l,r)),
     Atom,
     <l:@L> <lhs:Atom> "**" <rhs:Pow>   <r:@L> => Expr::Pow(Box::new(lhs), Box::new(rhs), Loc(l,r)),
     <l:@L>  <id:Identifier> <m:@L> "**" <rhs:Pow>  <r:@L>  => Expr::Pow(Box::new(Expr::Id(id, Loc(l,m))), Box::new(rhs), Loc(l,r)),
}

Unary: Expr = {
   Pow,
   <l:@L> "&" <x:Unary> <r:@L> => Expr::Address(Box::new(x), Loc(l,r)),
   <l:@L> "-" <x:Unary> <r:@L> => Expr::Neg(Box::new(x), Loc(l,r)),
}

Product: Expr = {
    Unary,
    <l:@L><lhs:Product> "*" notes <rhs:Unary> <r:@L> => Expr::Mul(Box::new(lhs), Box::new(rhs), Loc(l,r)),
    <l:@L> <lhs:Product> "/" notes <rhs:Unary>  <r:@L> => Expr::Div(Box::new(lhs), Box::new(rhs), Loc(l,r)),
}

Sum: Expr = {
    Product,
   <l:@L><lhs:Sum> "+" notes <rhs:Product> <r:@L> => Expr::Add(Box::new(lhs),Box::new(rhs), Loc(l,r)),
   <l:@L> <lhs:Sum> "-" notes <rhs:Product> <r:@L> => Expr::Sub(Box::new(lhs),Box::new(rhs), Loc(l,r)),
}

Expr: Expr = {
    Sum
}

BoolExpr: BoolExpr = {
   <lhs:Expr> "!="  <rhs:Expr>  => BoolExpr::NotEqual(lhs, rhs),
   <lhs:Expr> "=="  <rhs:Expr>  => BoolExpr::Equal(lhs, rhs),
}

Type: Type = {
    <s:PointerType> => Type::Pointer(Box::new(s)),
    "felt"  => Type::Felt,
    <s:Identifier> => Type::Id(<>),
    "(" <e:Type> <v:("," <Type>)*>  ")" => {
           let mut v = v;
           v.insert(0, e);
           Type::Tuple(v)
    },
    "(" <e:Type> <v:("," <Type>)+> "," ")" => {
         let mut v = v;
         v.insert(0, e);
         Type::Tuple(v)
    },
    "(" <e:Type> "," ")" => Type::Tuple(vec![e]),
    "(" ")" => Type::Tuple(vec![]),
}

Call: Call = {
    "call" "rel" <x:Expr> => Call::Rel(<>),
    "call" "abs" <x:Expr> => Call::Abs(<>),
    "call" <s:Identifier>  => Call::Id(<>),
}

Jmp: Jmp = {
    "jmp" "rel" <x:Expr> => Jmp::Rel(<>),
    "jmp" "abs" <x:Expr> => Jmp::Abs(<>),
    "jmp" <s:Identifier>  => Jmp::Id(<>),
    "jmp" "rel" <x:Expr> "if" <cond:Expr> "!=" <n:INT> => Jmp::RelIf(x, cond, n),
    "jmp" <s:Identifier>  "if" <cond:Expr> "!=" <n:INT> => Jmp::IdIf(s, cond,  n),
}

IfStatement: IfStatement = {
    <l:@L>  "if" <cond:BoolExpr> ":" newline <instructions:CodeBlock> <else_branch:ElseBranch?> "end"  <r:@L>  => IfStatement{cond,instructions, else_branch, label_neq: None, label_end: None, loc:Loc(l,r)}
}

ElseBranch: Vec<Instruction> = {
    "else" ":" newline <s:CodeBlock> => s
}

PointerType: PointerType = {
    <s:Type>"*" => PointerType::Single(<>),
     <s:Type> "**" => PointerType::Double(<>),
};

Register: Register = {
    "ap" => Register::Ap,
    "fp" => Register::Fp,
}

ConstantDef: ConstantDef = {
    <l:@L>  "const" <name:Id> "=" <init:Expr> <r:@L>  => ConstantDef {name, init, loc:Loc(l,r) },
}

Namespace: Namespace = {
   <l:@L>  <decorators:DecoratorList>  "namespace" <name:Id> ":" newline <instructions:CodeBlock> "end" <r:@L>  => Namespace {decorators, name, instructions,loc:Loc(l,r)  }
}

Struct: Struct = {
    <l:@L>  <decorators:DecoratorList>  "struct" <name:Id> ":" newline <members:Member*> "end" <r:@L> => Struct {decorators, name, members, loc:Loc(l,r) }
}

Member: Pair = {
    notes "member" <pair:Pair> newline => pair
}

FunctionDef: FunctionDef = {
   <l:@L> <decorators:DecoratorList>  "func" <name:Id>  <implicit_args:ImplicitArgs?> "("<input_args:IdentifierList>")" newline* <return_values:ReturnArgs?> ":" newline <instructions:CodeBlock> "end"<r:@L>   => FunctionDef {decorators, name, implicit_args, input_args, return_values, instructions, loc:Loc(l,r) }
}

pub CodeBlock: Vec<Instruction> = {
   notes <s:CodeLine*> => s,
}

CodeLine: Instruction = {
   <s:CodeElement> newline+ => s
}

pub CodeElement: Instruction = {
    InstructionBody,
    <l:@L>  <s:InstructionBody> ";" "ap" "++"  <r:@L>=> Instruction::ApAdd(Box::new(s), Loc(l,r))
}

InstructionBody: Instruction = {
   ConstantDef => Instruction::Const(<>),
  <l:@L> "member" <ty:TypedIdentifier> <r:@L> => Instruction::Member(ty, Loc(l,r)),
  <l:@L> "let" <binding:RefBinding> "=" <rvalue:RValue> <r:@L> => Instruction::Let(binding, Box::new(rvalue), Loc(l,r)),
  <l:@L> "local" <ty:TypedIdentifier> <x:AssignExpr?> <r:@L> => Instruction::Local(ty, x, Loc(l,r)),
  <l:@L> "tempvar" <ty:TypedIdentifier> <x:AssignExpr?> <r:@L> => Instruction::Tempvar(ty, x, Loc(l,r)),
  <l:@L> "assert" <lhs:Expr> "=" <rhs:Expr> <r:@L> => Instruction::Assert(lhs, rhs, Loc(l,r)),
  <l:@L> "static_assert" <lhs:Expr> "==" <rhs:Expr> <r:@L> => Instruction::StaticAssert(lhs, rhs, Loc(l,r)),
  <l:@L> <x:ReturnStmt> <r:@L> => Instruction::Return(x, Loc(l,r)),
  <l:@L> "return" <s:FunctionCall> <r:@L> => Instruction::ReturnFunctionCall(s, Loc(l,r)),
  IfStatement => Instruction::If(<>),
  Call => Instruction::CallInstruction(<>),
  FunctionCall => Instruction::FunctionCall(<>),
  <l:@L> <s:Identifier> ":" <r:@L> => Instruction::Label(s,Loc(l,r)),
 <l:@L> <lhs:Expr> "=" <rhs:Expr> <r:@L> => Instruction::Assign(lhs,rhs,Loc(l,r)),
  FunctionDef => Instruction::Function(<>),
  Struct => Instruction::Struct(<>),
  Namespace => Instruction::Namespace(<>),
  WithStatement => Instruction::WithStatement(<>),
  WithAttrStatement => Instruction::WithAttrStatement(<>),
  ImportDirective => Instruction::Import(<>),
  Directive => Instruction::Directive(<>),
   <l:@L> <h:Hint> <r:@L>  => Instruction::Hint(h, Loc(l,r)),
  <l:@L> "alloc_locals" <r:@L> => Instruction::AllocLocals(Loc(l,r)),
  <l:@L> <j:Jmp> <r:@L> => Instruction::Jmp(j, Loc(l,r)),
  <l:@L> "ret" <r:@L> => Instruction::Ret(Loc(l,r)),
  <l:@L> "ap" "+=" <x:Expr> <r:@L> => Instruction::ApAddAssign(x, Loc(l,r)),
  <l:@L> "dw" <x:Expr> <r:@L> => Instruction::DataWord(x, Loc(l,r)),
}

WithStatement: WithStatement = {
    <l:@L>  "with" <ids:(notes <CommaOne<AliasedId>>)> ":" newline <instructions:CodeBlock> "end" <r:@L>   => WithStatement {ids, instructions, loc:Loc(l,r)}
}

StringNotes: String = {
   <s:String> notes => s
}

AttrVal: Vec<String> = {
   "(" notes <vals:StringNotes*> ")" => vals
}

WithAttrStatement: WithAttrStatement = {
  <l:@L>  "with_attr" <id:Id> <attr_val:AttrVal?> ":" newline <instructions:CodeBlock> "end" <r:@L>  => WithAttrStatement {id,attr_val, instructions, loc:Loc(l,r) }
}

FunctionCall: FunctionCall  = {
    <l:@L>  <id:Identifier>  <implicit_args:ImplicitArgsList?> "("<args:ArgList>")"  <r:@L>   => FunctionCall{id, implicit_args, args, loc:Loc(l,r) },
}

RValue: RValue  = {
  Call => RValue::Call(<>),
  Expr => RValue::Expr(<>),
}

AssignExpr: Expr = {
  "=" <x:Expr> => x
}

IdentifierList: Vec<TypedIdentifier>  = {
   notes => vec![],
   notes <types:(TypedIdentifier notes "," notes)+> => {
       types.into_iter().map(|(arg,_,_,_)|arg).collect::<Vec<_>>()
   },
   notes <types:(TypedIdentifier notes "," notes)*> <other:TypedIdentifier> notes => {
      let mut types = types.into_iter().map(|(arg,_,_,_)|arg).collect::<Vec<_>>();
      types.push(other);
      types
   },
}

ArgList: Vec<ExprAssignment>  = {
   notes => vec![],
   notes <types:(ExprAssignment exprSeperator)+> => {
        types.into_iter().map(|(arg,_,)|arg).collect::<Vec<_>>()
    },
   notes <types:(ExprAssignment exprSeperator)*> <other:ExprAssignment> => {
         let mut types = types.into_iter().map(|(arg,_,)|arg).collect::<Vec<_>>();
         types.push(other);
         types
   },
}

ImplicitArgsList: Vec<ExprAssignment> = {
    "{" <args:ArgList> "}" => args
}

ImplicitArgs: Vec<TypedIdentifier> = {
    "{" <args:IdentifierList> "}" => args
}

ReturnArgs: Vec<TypedIdentifier> = {
    "->" newline* "(" <args:IdentifierList> ")" => args
}

ReturnStmt: Vec<ExprAssignment> = {
    "return" "(" <args: ArgList> ")" => args
}

Pair: Pair = {
    <name:Id> ":" <ty:Type> => Pair{name, ty}
}

TypedIdentifier: TypedIdentifier  = {
  <l:@L> "local" <id:Id> <ty:TypeHint?> <r:@L> => TypedIdentifier{is_local: true, id, ty, loc:Loc(l,r) },
  <l:@L>  <id:Id> <ty:TypeHint?> <r:@L>=> TypedIdentifier{is_local: false, id, ty, loc:Loc(l,r) },
}

RefBinding: RefBinding = {
    <ty:TypedIdentifier> => RefBinding::Id(<>),
    "(" <ty:IdentifierList> ")" => RefBinding::List(<>),
}

TypeHint: Type = {
  ":" <ty:Type> => ty
}

ExprAssignment: ExprAssignment = {
    <lhs:Expr> => ExprAssignment::Expr(lhs),
    <id:Id> "=" <rhs:Expr> => ExprAssignment::Id(id, rhs),
}

// ------------- Utils ------------------

Decorator: Decorator = {
 "@" <s:Id> newline* => Decorator::from(s)
}
DecoratorList: Vec<Decorator> = {
  <s:Decorator*> => s
}

INT: i128 = {
  "-" <n:number> => -n.parse::<i128>().unwrap(),
   <n:number> => n.parse::<i128>().unwrap(),
}

String: String = {
    <s:string> => s.to_string(),
};

Id: IDStr = {
    <s:identifier> => s.to_string(),
};

Builtin: Builtin = {
 <s:Id> => Builtin::from(s)
}

Identifier: Identifier = {
    <s:PuncuatedOne<identifier>> => s.into_iter().map(str::to_string).collect::<Vec<_>>(),
};

Hint: String = {
    <s:hint> => s.to_string(),
};

NoteOrNewLine: Option<Cow<'input, str>> = {
    newline => None,
    comment => Some(Cow::Borrowed(<>)),
}

notes: Vec<Option<Cow<'input, str>>> = {
  NoteOrNewLine*
}

nomemptyNotes: Vec<Option<Cow<'input, str>>> = {
  NoteOrNewLine+
}

commaOrNonEmptyNotes:() = {
    "," => (),
    newline => (),
    comment => (),
}

exprSeperator = {
   commaOrNonEmptyNotes+
}
Comma<T>: Vec<T> = {
    => Vec::new(),
    CommaOne<T>,
};

CommaOne<T>: Vec<T> = {
    <e:T> <v:("," <T>)*>  => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

PuncuatedOne<T>: Vec<T> = {
    <e:T> <v:("." <T>)*>  => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

extern {
    type Location = usize;
    type Error = CairoLexerError;

    enum CairoToken<'input> {
        identifier => CairoToken::Identifier(<&'input str>),
        string => CairoToken::StringLiteral(<&'input str>),
        shortstring => CairoToken::ShortStringLiteral(<&'input str>),
        number => CairoToken::Number(<&'input str>),
        hexnumber => CairoToken::HexNumber(<&'input str>),
        comment => CairoToken::Comment(<&'input str>),
        hint => CairoToken::Hint(<&'input str>),
        newline => CairoToken::Newline,

        "*" => CairoToken::Star,
        "**" => CairoToken::DoubleStar,
        "{" => CairoToken::OpenCurlyBrace,
        "}" => CairoToken::CloseCurlyBrace,
        "(" => CairoToken::OpenParenthesis,
        ")" => CairoToken::CloseParenthesis,
        "[" => CairoToken::OpenBracket,
        "]" => CairoToken::CloseBracket,
        "_" => CairoToken::Underscore,
        ";" => CairoToken::Semicolon,
        "!" => CairoToken::Not,
        "!=" => CairoToken::Neq,
        "." => CairoToken::Point,
        "," => CairoToken::Comma,
        "@" => CairoToken::At,

        "&" => CairoToken::And,
        "+" => CairoToken::Add,
        "+=" => CairoToken::AddAssign,
        "++" => CairoToken::DoublePlus,
        "-" => CairoToken::Sub,
        "/" => CairoToken::Div,
        "=" => CairoToken::Assign,
        "==" => CairoToken::Equals,
        ":" => CairoToken::Colon,
        "cast" => CairoToken::Cast,
        "const" => CairoToken::Const,
        "let" => CairoToken::Let,
        "return" => CairoToken::Return,
        "ret" => CairoToken::Ret,
        "func" => CairoToken::Func,
        "end" => CairoToken::End,
        "local" => CairoToken::Local,
        "alloc_locals" => CairoToken::AllocLocals,
        "struct" => CairoToken::Struct,
        "namespace" => CairoToken::Namespace,
        "member" => CairoToken::Member,
        "felt" => CairoToken::Felt,
        "from" => CairoToken::From,
        "import" => CairoToken::Import,
        "if" => CairoToken::If,
        "else" => CairoToken::Else,
        "assert" => CairoToken::Assert,
        "static_assert" => CairoToken::StaticAssert,
        "->" => CairoToken::Arrow,
        "%builtins" => CairoToken::Builtins,
        "%lang" => CairoToken::Lang,
        "ap" => CairoToken::Ap,
        "fp" => CairoToken::Fp,
        "as" => CairoToken::As,
        "tempvar" => CairoToken::Tempvar,
        "jmp" => CairoToken::Jmp,
        "abs" => CairoToken::Abs,
        "rel" => CairoToken::Rel,
        "with_attr" => CairoToken::WithAttr,
        "with" => CairoToken::With,
        "call" => CairoToken::Call,
        "nondet" => CairoToken::Nondet,
        "dw" => CairoToken::Dw,
    }
}